train_desc=' LW on and many agents since the beggining, rew_coef higher . \n                            \n                if target_id != agent_id:  #avoid the scenario where there are no targets, returns the last rewards in the last steps\n\n                # reward for closing the distance\n                self.rew_closing_distance[agent_id] = np.clip(\n                    self.previous_distance[agent_id][target_id] - self.current_distance[agent_id][target_id],\n                    a_min=-10.0,\n                    a_max=None,\n                )  \n\n                \n\n                exploding_distance = self.current_distance[agent_id][target_id] - 0.5\n\n                self.rew_close_to_target[agent_id] = - exploding_distance\n                 \n                # self.rew_close_to_target[agent_id] = 1 / (exploding_distance\n                #                                 if exploding_distance > 0\n                #                                 else 0.09)   #if the 1 is to hight the kamikazes will circle the enemy. try a\n\n\n            self.rewards[agent_id] += (\n                    self.rew_closing_distance[agent_id]\n                    + self.rew_close_to_target[agent_id] * self.reward_coef #* (1 - self.step_count/self.max_steps) # regularizations\n\n            )\n            \n            \n\n'
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\resume_train.py'
model.start_datetime=2024-01-10 05:19:31.189082
elapsed_time=0:11:45.509537
model_name=ma_quadx_chaser-1048576.zip
model_name=ma_quadx_chaser-2097152
model.num_timesteps=2097152
lw_stand_still=True
device=device(type='cuda')
seed=0
batch_size=512
model.learning_rate=0.0001
discount_factor=0.98
nn_t=[128, 128, 128]
num_cpus=16
num_vec_envs=16
model.n_envs=32
model.n_steps=2048
model.n_epochs=10
model.batch_size=512
random_respawn=True
spawn_settings={'lw_center_bounds': 10.0, 'lw_spawn_radius': 2.0, 'lm_center_bounds': 5.0, 'lm_spawn_radius': 10.0, 'min_z': 0.5, 'seed': None, 'num_lw': 1, 'num_lm': 2}
completion_datetime=2024-01-10 05:31:16.698619
model.action_space=Box(-1.0, 1.0, (4,), float64)
model.observation_space=Box(-inf, inf, (43,), float64)
env_kwargs={'start_pos': array([[ 2.90779411,  5.28235726,  6.16918665],
       [ 5.79968213, -4.30948075,  4.44582549],
       [-7.28114231, -3.88403907,  8.24350809]]), 'start_orn': array([[-0.76963158,  0.60840092,  0.66858082],
       [-0.79141137, -0.02515718, -1.98187244],
       [ 0.        ,  0.        ,  0.        ]]), 'formation_center': [-9.281142312328715, -3.884039066690203, 8.243508092552819], 'flight_dome_size': (27.0,), 'seed': None, 'spawn_settings': {'lw_center_bounds': 10.0, 'lw_spawn_radius': 2.0, 'lm_center_bounds': 5.0, 'lm_spawn_radius': 10.0, 'min_z': 0.5, 'seed': None, 'num_lw': 1, 'num_lm': 2}, 'num_lm': 2, 'num_lw': 2, 'max_duration_seconds': 30, 'lw_stand_still': True, 'lw_moves_random': False, 'lw_chases': False, 'lw_attacks': False, 'lw_threat_radius': 4.0, 'lw_shoot_range': 1.0, 'agent_hz': 30, 'max_velocity_magnitude': 10, 'rew_exploding_target': 280, 'distance_factor': 0.1, 'speed_factor': 0.5}
train_kwargs={'device': device(type='cuda'), 'batch_size': 512, 'lr': 0.0001, 'discount_factor': 0.98, 'nn_t': [128, 128, 128], 'num_vec_envs': 16}
model.policy_kwargs={'net_arch': {'pi': [128, 128, 128], 'vf': [128, 128, 128]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=43, out_features=128, bias=True)
      (1): Tanh()
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Tanh()
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=43, out_features=128, bias=True)
      (1): Tanh()
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Tanh()
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=128, out_features=4, bias=True)
  (value_net): Linear(in_features=128, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
