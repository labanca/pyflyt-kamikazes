train_desc='new rewards. Current_vel_angles still broken.\n\n            # reward for closing the distance\n            self.rew_closing_distance = np.clip(\n                self.previous_distance[agent_id][target_id] - self.current_distance[agent_id][target_id],\n                a_min=-10.0,\n                a_max=None,\n            ) * self.chasing[agent_id][target_id]\n\n            self.rew_close_to_target = 1 / (\n                self.current_distance[agent_id][target_id]\n                if self.current_distance[agent_id][target_id] > 0 else 0.1 )   #if the 1 is to hight the kamikazes will circle the enemy. try a\n\n\n            self.rewards[agent_id] += (\n                    self.rew_closing_distance\n                    + self.rew_close_to_target * self.reward_coef # regularizations\n\n            )\n'
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\train.py'
model.start_datetime=2024-01-04 19:54:08.929890
elapsed_time=0:35:57.039322
model.num_timesteps=1015808
lw_stand_still=True
device=device(type='cpu')
seed=None
batch_size=512
model.learning_rate=0.0001
discount_factor=0.98
nn_t=[128, 128, 128]
num_cpus=16
num_vec_envs=16
model.n_envs=16
model.n_steps=2048
model.n_epochs=10
model.batch_size=512
random_respawn=True
spawn_settings={'lw_center_bounds': 10.0, 'lm_center_bounds': 5.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 10.0, 'min_z': 1.0, 'seed': None, 'num_lw': 1, 'num_lm': 1}
completion_datetime=2024-01-04 20:30:05.969212
model.action_space=Box(-10.0, 10.0, (4,), float64)
model.observation_space=Box(-inf, inf, (40,), float64)
env_kwargs={'start_pos': array([[-3.85317508, -9.4537733 ,  6.34180738],
       [-1.59627868, -2.64992239,  4.80439948]]), 'start_orn': array([[-0.13501604, -0.8230222 ,  5.3564433 ],
       [ 0.        ,  0.        ,  0.        ]]), 'formation_center': [-2.596278680946355, -2.6499223927661752, 4.804399476300645], 'flight_dome_size': 31.0, 'spawn_settings': {'lw_center_bounds': 10.0, 'lm_center_bounds': 5.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 10.0, 'min_z': 1.0, 'seed': None, 'num_lw': 1, 'num_lm': 1}, 'num_lm': 1, 'num_lw': 1, 'max_duration_seconds': 10, 'reward_coef': 1.0, 'lw_stand_still': True}
model.policy_kwargs={'net_arch': {'pi': [128, 128, 128], 'vf': [128, 128, 128]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=40, out_features=128, bias=True)
      (1): Tanh()
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Tanh()
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=40, out_features=128, bias=True)
      (1): Tanh()
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Tanh()
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=128, out_features=4, bias=True)
  (value_net): Linear(in_features=128, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
