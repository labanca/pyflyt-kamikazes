train_desc='Collision revamped and range 0.5m. 15 seg epis. agent hz 30. min dist spawm LM from 3 * lw_spawn_radius.\n\n           # reward for closing the distance\n            self.rew_closing_distance = np.clip(\n                self.previous_distance[agent_id][target_id] - self.current_distance[agent_id][target_id],\n                a_min=-10.0,\n                a_max=None,\n            ) \n\n            # reward for maintaning linear velocities.\n            self.rew_speed_magnitude =(\n                    (self.current_magnitude[agent_id])**2\n                    * self.approaching[agent_id][target_id]\n                    * 1.0\n            )\n\n            self.rewards[agent_id] += (\n                    self.rew_closing_distance\n                    + self.rew_speed_magnitude\n\n            )\n'
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\train.py'
model.start_datetime=2024-01-03 00:59:34.855072
elapsed_time=9:33:55.559187
model.num_timesteps=30081024
device=device(type='cuda')
seed=None
batch_size=512
model.learning_rate=0.001
nn_t=[128, 128, 128]
num_cpus=12
num_vec_envs=12
model.n_envs=72
model.n_steps=2048
model.n_epochs=10
model.batch_size=512
random_respawn=True
spawn_settings={'lw_center_bounds': 5.0, 'lm_center_bounds': 5.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 5.0, 'min_z': 1.0, 'seed': None, 'num_lw': 3, 'num_lm': 6}
completion_datetime=2024-01-03 10:33:30.414259
model.action_space=Box(-10.0, 10.0, (4,), float64)
model.observation_space=Box(-inf, inf, (40,), float64)
env_kwargs={'start_pos': array([[-8.14973689,  0.49081312,  7.18213577],
       [-0.01924835,  5.19715808,  3.59156921],
       [-3.33396974, -2.25967915,  1.21531156],
       [-0.88621326,  0.64521203,  6.67162838],
       [-0.13121275,  4.68585522,  8.64057005],
       [-6.11422075,  0.08765886,  4.12703115],
       [ 4.97571295,  4.12596961,  5.86969257],
       [ 3.47571295,  4.99199501,  5.86969257],
       [ 3.47571295,  3.25994421,  5.86969257]]), 'start_orn': array([[ 0.47112944, -0.37587177,  3.28770127],
       [-0.83587836,  0.7436194 , -6.16639164],
       [-0.10184465,  0.38278275, -5.76197551],
       [ 0.75547301, -0.04832682, -0.55617244],
       [ 0.92643586,  0.02741123, -2.73016035],
       [ 0.09408049,  0.59047732, -5.87044939],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ]]), 'formation_center': [3.9757129459680236, 4.125969609039494, 5.869692566682381], 'flight_dome_size': 16.0, 'spawn_settings': {'lw_center_bounds': 5.0, 'lm_center_bounds': 5.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 5.0, 'min_z': 1.0, 'seed': None, 'num_lw': 3, 'num_lm': 6}, 'num_lm': 6, 'num_lw': 3, 'max_duration_seconds': 15}
model.policy_kwargs={'net_arch': {'pi': [128, 128, 128], 'vf': [128, 128, 128]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=40, out_features=128, bias=True)
      (1): Tanh()
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Tanh()
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=40, out_features=128, bias=True)
      (1): Tanh()
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Tanh()
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=128, out_features=4, bias=True)
  (value_net): Linear(in_features=128, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
