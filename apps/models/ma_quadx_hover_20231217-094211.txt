__file__='C:\\projects\\pyflyt-kamikazes\\apps\\train.py'
model.start_datetime=2023-12-17 01:31:08.258240
elapsed_time=8:11:03.304419
model.num_timesteps=20004864
device=device(type='cpu')
seed=None
batch_size=512
model.learning_rate=0.0001
nn_t=[128, 128, 128]
num_cpus=12
num_vec_envs=12
model.n_envs=12
random_respawn=True
spawn_settings={'num_drones': 2, 'min_distance': 2.0, 'spawn_radius': 7.0, 'center': (0, 0, 0), 'seed': None}
completion_datetime=2023-12-17 09:42:11.562659
env_kwargs={'num_lm': 1, 'start_pos': array([[-2.33072777, -4.89491653,  4.1908199 ],
       [-5.41339902,  3.16193107,  1.2323029 ]]), 'start_orn': array([[-0.77042065,  0.0079042 ,  5.08758827],
       [ 0.        ,  0.        ,  0.        ]]), 'flight_dome_size': 20.784609690826528, 'uav_mapping': array(['lm', 'lw'], dtype='<U2'), 'spawn_settings': {'num_drones': 2, 'min_distance': 2.0, 'spawn_radius': 7.0, 'center': (0, 0, 0), 'seed': None}}
model.policy_kwargs={'net_arch': {'pi': [128, 128, 128], 'vf': [128, 128, 128]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=33, out_features=128, bias=True)
      (1): Tanh()
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Tanh()
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=33, out_features=128, bias=True)
      (1): Tanh()
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Tanh()
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=128, out_features=4, bias=True)
  (value_net): Linear(in_features=128, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
