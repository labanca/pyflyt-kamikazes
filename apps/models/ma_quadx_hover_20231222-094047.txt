train_desc='10 times more rew_closing_distance and 3 times more rew_speed_magitude with less requirement of magnitude.\n            # reward for closing the distance\n            rew_closing_distance = np.clip(\n                self.previous_distance[agent_id][target_id] - self.current_distance[agent_id][target_id],\n                a_min=-10.0,\n                a_max=None,\n            ) * (\n                    self.chasing[agent_id][target_id] * 10.0\n                )\n\n            # reward for engaging the enemy\n            rew_engaging_enemy = np.divide(3.0, self.current_vel_angles[agent_id][target_id],\n                                           where=self.current_vel_angles[agent_id][target_id] != 0) * (\n                    self.chasing[agent_id][target_id]\n                    * self.approaching[agent_id][target_id]\n                    * 1.0\n                )\n\n            # reward for maintaning linear velocities.\n            rew_speed_magitude =(\n                    (3.0 if self.current_magnitude[agent_id] > 3.0 else 0.0)\n                    * self.chasing[agent_id][target_id]\n                    * self.approaching[agent_id][target_id]\n            )\n\n\n\n            self.rewards[agent_id] += (\n                    rew_closing_distance\n                    + rew_engaging_enemy\n                    + rew_speed_magitude\n            )\n'
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\train.py'
model.start_datetime=2023-12-22 01:45:07.181041
elapsed_time=7:55:40.346121
model.num_timesteps=15015936
device=device(type='cuda')
seed=None
batch_size=512
model.learning_rate=0.0001
nn_t=[256, 256, 256]
num_cpus=12
num_vec_envs=12
model.n_envs=12
model.n_steps=2048
model.n_epochs=10
model.batch_size=512
random_respawn=True
spawn_settings={'num_drones': 2, 'min_distance': 2, 'spawn_radius': 5, 'center': (0, 0, 0), 'seed': None}
completion_datetime=2023-12-22 09:40:47.527162
model.action_space=Box(-10.0, 10.0, (4,), float64)
model.observation_space=Box(-inf, inf, (33,), float64)
env_kwargs={'num_lm': 1, 'start_pos': array([[-1.75421944,  1.32762391,  4.64278308],
       [-0.27498772,  3.21915413,  4.41026092]]), 'start_orn': array([[ 0.36832091, -0.57300074, -2.28168395],
       [ 0.        ,  0.        ,  0.        ]]), 'flight_dome_size': 15.588457268119896, 'spawn_settings': {'num_drones': 2, 'min_distance': 2, 'spawn_radius': 5, 'center': (0, 0, 0), 'seed': None}}
model.policy_kwargs={'net_arch': {'pi': [256, 256, 256], 'vf': [256, 256, 256]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=33, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=33, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=256, out_features=4, bias=True)
  (value_net): Linear(in_features=256, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
