result: chega no alvo como o ma_quadx_hover_20231217-094211.zip, porem mais rapido e sem usar todas as rewards. Ainda para perto do alvo ao inves de se matar nele rapido.
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\train.py'
model.start_datetime=2023-12-17 12:30:57.110945
elapsed_time=0:39:26.314832
model.num_timesteps=1523712
device=device(type='cpu')
seed=None
batch_size=512
model.learning_rate=0.0001
nn_t=[128, 128, 128]
num_cpus=12
num_vec_envs=12
model.n_envs=12
random_respawn=True
spawn_settings={'num_drones': 2, 'min_distance': 2.0, 'spawn_radius': 5.0, 'center': (0, 0, 0), 'seed': None}
completion_datetime=2023-12-17 13:10:23.425777
env_kwargs={'num_lm': 1, 'start_pos': array([[ 1.53308273,  1.83234309,  3.30219864],
       [ 2.03152828, -2.55444991,  3.70096586]]), 'start_orn': array([[-0.11243833,  0.24479316, -4.26658678],
       [ 0.        ,  0.        ,  0.        ]]), 'flight_dome_size': 15.588457268119896, 'uav_mapping': array(['lm', 'lw'], dtype='<U2'), 'spawn_settings': {'num_drones': 2, 'min_distance': 2.0, 'spawn_radius': 5.0, 'center': (0, 0, 0), 'seed': None}}
model.policy_kwargs={'net_arch': {'pi': [128, 128, 128], 'vf': [128, 128, 128]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=33, out_features=128, bias=True)
      (1): Tanh()
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Tanh()
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=33, out_features=128, bias=True)
      (1): Tanh()
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Tanh()
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=128, out_features=4, bias=True)
  (value_net): Linear(in_features=128, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
reward=    def _compute_engagement_rewards(self, agent_id) -> None:
        """_compute_engagement_rewards."""
        # reset rewards
        self.rewards[agent_id] *= 0.0

        target_id = self.find_nearest_drone(agent_id)
        # sparse reward computation
        if not self.sparse_reward:

            self.approaching = self.current_distance < self.previous_distance

            # reward for closing the distance
            rew_closing_distance = (np.clip(
                self.previous_distance[agent_id][target_id] - self.current_distance[agent_id][target_id],
                a_min=-10.0,
                a_max=None,
                ) * (
                    self.chasing[agent_id][target_id]) * 1.0)

            # TODO: tentar quando angulo for praticamente 0 dar 0 pra ele buscar as demais rewards.
            # reward for engaging the enemy
            rew_engaging_enemy = 3.0 / (self.current_angles[agent_id][target_id]+ 0.1) * (
                self.approaching[agent_id][target_id] * 1.0
            )

            self.rewards[agent_id] += (
                    rew_closing_distance

                    + rew_engaging_enemy

            )
