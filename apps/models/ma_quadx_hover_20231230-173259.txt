Result: The drones learn to circuvent the target in long arcs, approaching slowing and 99% of the time not attacking. Sometimes a attack happen, sometimes one is downed by the LW. Ally collison are rare. If the drne learns how to attack, maybe is a valid strategy.
train_desc='training from zero with FSM on and self.gunloaded in the observation.\n\n             # reward for closing the distance\n            rew_closing_distance = np.clip(\n                self.previous_distance[agent_id][target_id] - self.current_distance[agent_id][target_id] * 5.0,\n                a_min=-10.0,\n                a_max=None,\n            ) * (\n                    self.chasing[agent_id][target_id]\n                )\n\n            # reward for engaging the enemy\n            rew_engaging_enemy = np.divide(3.0, self.current_vel_angles[agent_id][target_id],\n                                           where=self.current_vel_angles[agent_id][target_id] != 0) * (\n                    self.chasing[agent_id][target_id]\n                    * self.approaching[agent_id][target_id]\n                    * 1.0\n                )\n\n            # # reward for progressing to engagement\n            rew_near_engagement = (\n                    (self.previous_vel_angles[agent_id][target_id] - self.current_vel_angles[agent_id][target_id])\n                    * 10.0\n                    * self.in_range[agent_id][target_id]\n                    * self.approaching[agent_id][target_id]\n            )\n\n            # reward for maintaning linear velocities.\n            rew_speed_magnitude =(\n                    (self.current_magnitude[agent_id])**2\n                    #* self.chasing[agent_id][target_id]\n                    * self.approaching[agent_id][target_id]\n                    * 5.0\n            )\n\n\n\n            self.rewards[agent_id] += (\n                    rew_closing_distance\n                    + rew_engaging_enemy\n                    + rew_speed_magnitude\n            )\n'
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\train.py'
model.start_datetime=2023-12-30 15:17:51.903175
elapsed_time=2:15:07.590769
model.num_timesteps=5013504
device=device(type='cuda')
seed=None
batch_size=512
model.learning_rate=0.001
nn_t=[256, 256, 256]
num_cpus=12
num_vec_envs=12
model.n_envs=24
model.n_steps=2048
model.n_epochs=10
model.batch_size=512
random_respawn=True
spawn_settings={'lw_center_bounds': 10.0, 'lm_center_bounds': 10.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 10, 'min_z': 1.0, 'seed': None, 'num_lw': 1, 'num_lm': 2}
completion_datetime=2023-12-30 17:32:59.493944
model.action_space=Box(-10.0, 10.0, (4,), float64)
model.observation_space=Box(-inf, inf, (42,), float64)
env_kwargs={'start_pos': array([[ 1.01296422e+01,  8.24736612e+00,  2.42942356e+00],
       [ 2.79293864e-03, -6.03642628e+00,  1.63909252e+01],
       [ 2.94733340e+00, -1.70884936e+00,  1.84721000e+00]]), 'start_orn': array([[ 0.52999952, -0.59137896, -0.0454017 ],
       [-0.05709043,  0.01662028, -2.68199197],
       [ 0.        ,  0.        ,  0.        ]]), 'formation_center': [1.9473333966814454, -1.7088493649049852, 1.8472100037625983], 'flight_dome_size': 52.5, 'spawn_settings': {'lw_center_bounds': 10.0, 'lm_center_bounds': 10.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 10, 'min_z': 1.0, 'seed': None, 'num_lw': 1, 'num_lm': 2}, 'num_lm': 2, 'num_lw': 1}
model.policy_kwargs={'net_arch': {'pi': [256, 256, 256], 'vf': [256, 256, 256]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=42, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=42, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=256, out_features=4, bias=True)
  (value_net): Linear(in_features=256, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
