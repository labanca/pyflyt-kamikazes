train_desc='resume training for ma_quadx_hover_20231228-113511.zip, but with LWFSM on.\n\n             # reward for closing the distance\n            rew_closing_distance = np.clip(\n                self.previous_distance[agent_id][target_id] - self.current_distance[agent_id][target_id] * 5.0,\n                a_min=-10.0,\n                a_max=None,\n            ) * (\n                    self.chasing[agent_id][target_id]\n                )\n\n            # reward for engaging the enemy\n            rew_engaging_enemy = np.divide(3.0, self.current_vel_angles[agent_id][target_id],\n                                           where=self.current_vel_angles[agent_id][target_id] != 0) * (\n                    self.chasing[agent_id][target_id]\n                    * self.approaching[agent_id][target_id]\n                    * 1.0\n                )\n\n            # # reward for progressing to engagement\n            rew_near_engagement = (\n                    (self.previous_vel_angles[agent_id][target_id] - self.current_vel_angles[agent_id][target_id])\n                    * 10.0\n                    * self.in_range[agent_id][target_id]\n                    * self.approaching[agent_id][target_id]\n            )\n\n            # reward for maintaning linear velocities.\n            rew_speed_magnitude =(\n                    (self.current_magnitude[agent_id])**2\n                    #* self.chasing[agent_id][target_id]\n                    * self.approaching[agent_id][target_id]\n                    * 5.0\n            )\n\n\n\n            self.rewards[agent_id] += (\n                    rew_closing_distance\n                    + rew_engaging_enemy\n                    + rew_speed_magnitude\n            )\n'
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\resume_train.py'
model.start_datetime=2023-12-29 20:03:03.995226
elapsed_time=0:23:21.335693
model.num_timesteps=31186944
device=device(type='cuda')
seed=None
batch_size=512
model.learning_rate=0.001
nn_t=[256, 256, 256]
num_cpus=12
num_vec_envs=12
model.n_envs=60
model.n_steps=2048
model.n_epochs=10
model.batch_size=512
random_respawn=True
spawn_settings={'lw_center_bounds': 2.0, 'lm_center_bounds': 5.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 5, 'min_z': 1.0, 'seed': None, 'num_lw': 3, 'num_lm': 5}
completion_datetime=2023-12-29 20:26:25.330919
model.action_space=Box(-10.0, 10.0, (4,), float64)
model.observation_space=Box(-inf, inf, (41,), float64)
env_kwargs={'start_pos': array([[-0.87037308, -7.1471182 ,  1.97202793],
       [ 3.11242808, -3.11922029,  5.38824822],
       [ 4.41784486, -4.34846837,  2.12573519],
       [ 3.99156117,  2.15153649,  1.02356171],
       [-1.91752855, -5.11224634,  6.5779398 ],
       [ 1.63685454, -0.16224597,  1.33155662],
       [ 0.13685454,  0.70377943,  1.33155662],
       [ 0.13685454, -1.02827138,  1.33155662]]), 'start_orn': array([[ 0.41767409, -0.6403203 ,  4.14923445],
       [-0.87660842,  0.13411784, -0.77385935],
       [-0.89980304,  0.29390253, -0.17383264],
       [-0.60417722, -0.4553187 , -1.92007808],
       [ 0.5948005 , -0.6475983 ,  2.25603178],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ]]), 'formation_center': [0.6368545420735248, -0.16224597296251342, 1.3315566187441596], 'flight_dome_size': 20.0, 'spawn_settings': {'lw_center_bounds': 2.0, 'lm_center_bounds': 5.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 5, 'min_z': 1.0, 'seed': None, 'num_lw': 3, 'num_lm': 5}, 'num_lm': 5, 'num_lw': 3, 'black_death': True}
model.policy_kwargs={'net_arch': {'pi': [256, 256, 256], 'vf': [256, 256, 256]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=41, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=41, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=256, out_features=4, bias=True)
  (value_net): Linear(in_features=256, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
