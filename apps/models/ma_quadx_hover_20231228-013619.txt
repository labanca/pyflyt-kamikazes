train_desc="testing only with speed magnitude, now without self.chasing. 5 lm and mag_rew only with a minimal speed.\n\n            self.current_magnitude = [np.linalg.norm(action[np.r_[:2, 3]]) for action in self.current_actions]\n            self.in_range = self.current_distance < self.lethal_distance # lethal distance = 0.15\n            self.chasing = np.abs(self.current_vel_angles) < (np.pi / 2.0)  # I've tryed  2.0\n            \n            # reward for maintaning linear velocities.\n            rew_speed_magnitude =(\n                    (self.current_magnitude[agent_id])**2 if self.current_magnitude[agent_id] > 1.5 else 0\n                    * self.approaching[agent_id][target_id]\n                    * 1.0\n            )\n\n            self.rewards[agent_id] += (\n\n                    + rew_speed_magitude\n            )\n"
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\train.py'
model.start_datetime=2023-12-28 01:12:21.267482
elapsed_time=0:23:57.892188
model.num_timesteps=1105920
device=device(type='cuda')
seed=None
batch_size=512
model.learning_rate=0.0001
nn_t=[256, 256, 256]
num_cpus=12
num_vec_envs=12
model.n_envs=60
model.n_steps=2048
model.n_epochs=10
model.batch_size=512
random_respawn=True
spawn_settings={'lw_center_bounds': 5.0, 'lm_center_bounds': 10.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 10, 'min_z': 1.0, 'seed': None, 'num_lw': 1, 'num_lm': 5}
completion_datetime=2023-12-28 01:36:19.159670
model.action_space=Box(-10.0, 10.0, (4,), float64)
model.observation_space=Box(-inf, inf, (41,), float64)
env_kwargs={'start_pos': array([[  0.12123143,  -2.75446047,   1.92704918],
       [ -1.73871779,  -5.27263947,  12.79910264],
       [  2.48787573, -10.27070231,  11.16473054],
       [ -7.5674658 ,  -6.84979387,   8.64234065],
       [  0.45256673,  -6.2681961 ,   1.3210513 ],
       [ -3.3698546 ,  -4.41917921,   1.72378378]]), 'start_orn': array([[-0.91282429, -0.71918848,  2.06054487],
       [ 0.53775629, -0.95237637,  5.65889786],
       [-0.8031836 ,  0.27521491, -0.31091805],
       [-0.53467765,  0.36258882,  5.38989195],
       [-0.09650555, -0.46958585,  3.66614388],
       [ 0.        ,  0.        ,  0.        ]]), 'formation_center': [-4.369854598461563, -4.419179205896972, 1.723783779802205], 'flight_dome_size': 40.0, 'spawn_settings': {'lw_center_bounds': 5.0, 'lm_center_bounds': 10.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 10, 'min_z': 1.0, 'seed': None, 'num_lw': 1, 'num_lm': 5}, 'num_lm': 5}
model.policy_kwargs={'net_arch': {'pi': [256, 256, 256], 'vf': [256, 256, 256]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=41, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=41, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=256, out_features=4, bias=True)
  (value_net): Linear(in_features=256, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
