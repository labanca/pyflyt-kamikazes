train_desc=' Trying the same rewards of ma_quadx_hover_20231219-080504.zip, 4 LW, 4LM, but now with a collission radius of 0.4\n    rew_closing_distance = np.clip(\n    self.previous_distance[agent_id][target_id] - self.current_distance[agent_id][target_id],\n    a_min=-10.0,\n    a_max=None,\n    ) * (\n        self.chasing[agent_id][target_id] * 1.0\n        )\n\n# reward for engaging the enemy\nrew_engaging_enemy = 3.0 / (self.current_angles[agent_id][target_id]+ 0.1) * (\n    self.chasing[agent_id][target_id]\n    * self.approaching[agent_id][target_id]\n    * 1.0\n)\n\n# reward for progressing to engagement\nrew_progress_eng = (\n        (self.previous_vel_angles[agent_id][target_id] - self.current_vel_angles[agent_id][target_id])\n        * 10.0\n        * self.in_range[agent_id][target_id]\n        * self.approaching[agent_id][target_id]\n)\n'
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\train.py'
model.start_datetime=2023-12-20 23:04:23.458717
elapsed_time=0:25:54.003345
model.num_timesteps=1048576
device=device(type='cpu')
seed=None
batch_size=512
model.learning_rate=0.0001
nn_t=[128, 128, 128]
num_cpus=8
num_vec_envs=8
model.n_envs=32
random_respawn=True
spawn_settings={'num_drones': 8, 'min_distance': 2, 'spawn_radius': 5, 'center': (0, 0, 0), 'seed': None}
completion_datetime=2023-12-20 23:30:17.462062
env_kwargs={'num_lm': 4, 'start_pos': array([[ 3.21002954,  4.9794147 ,  2.90458248],
       [-1.57325991,  2.66171784,  4.14522825],
       [-3.40360273,  1.20801979,  2.61806021],
       [ 2.58293335, -4.75867095,  4.79275358],
       [ 1.86248088,  0.47256477,  4.70847777],
       [ 3.54798458, -2.20991523,  3.75582633],
       [-4.06789025, -2.80669259,  3.85318673],
       [ 2.33306141, -4.61737055,  2.60908015]]), 'start_orn': array([[ 0.71030582,  0.26352733, -0.67375565],
       [-0.2465609 ,  0.17625527, -1.35664226],
       [-0.89630629, -0.85728263, -1.3771179 ],
       [-0.21439445,  0.23842693, -3.1657668 ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ]]), 'flight_dome_size': 15.588457268119896, 'spawn_settings': {'num_drones': 8, 'min_distance': 2, 'spawn_radius': 5, 'center': (0, 0, 0), 'seed': None}}
model.policy_kwargs={'net_arch': {'pi': [128, 128, 128], 'vf': [128, 128, 128]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=33, out_features=128, bias=True)
      (1): Tanh()
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Tanh()
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=33, out_features=128, bias=True)
      (1): Tanh()
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Tanh()
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=128, out_features=4, bias=True)
  (value_net): Linear(in_features=128, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
