train_desc="testing only with speed magnitude, now without self.chasing. 5 lm and mag_rew only with a minimal speed.\n\n            self.current_magnitude = [np.linalg.norm(action[np.r_[:2, 3]]) for action in self.current_actions]\n            self.in_range = self.current_distance < self.lethal_distance # lethal distance = 0.15\n            self.chasing = np.abs(self.current_vel_angles) < (np.pi / 2.0)  # I've tryed  2.0\n            \n            # reward for maintaning linear velocities.\n            rew_speed_magnitude =(\n                    (self.current_magnitude[agent_id])**2 if self.current_magnitude[agent_id] > 1.5 else 0\n                    * self.approaching[agent_id][target_id]\n                    * 1.0\n            )\n\n            self.rewards[agent_id] += (\n\n                    + rew_speed_magitude\n            )\n"
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\train.py'
model.start_datetime=2023-12-27 22:41:04.773473
elapsed_time=0:19:58.652144
model.num_timesteps=1105920
device=device(type='cuda')
seed=None
batch_size=512
model.learning_rate=0.0001
nn_t=[256, 256, 256]
num_cpus=12
num_vec_envs=12
model.n_envs=60
model.n_steps=2048
model.n_epochs=10
model.batch_size=512
random_respawn=True
spawn_settings={'lw_center_bounds': 5.0, 'lm_center_bounds': 10.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 10, 'min_z': 1.0, 'seed': None, 'num_lw': 1, 'num_lm': 5}
completion_datetime=2023-12-27 23:01:03.425617
model.action_space=Box(-10.0, 10.0, (4,), float64)
model.observation_space=Box(-inf, inf, (40,), float64)
env_kwargs={'start_pos': array([[ 10.36587657,  -8.72992117,  19.25555371],
       [ 12.62008484,  -3.93286847,  17.71370914],
       [  9.64306458,   6.00685144,  11.16835751],
       [ -0.58038914, -12.27290383,   5.11289356],
       [  2.68500049,   4.41690328,   4.42637335],
       [  0.89897538,   0.701068  ,   1.97243988]]), 'start_orn': array([[ 0.33014834, -0.85757403, -1.46052825],
       [-0.93185868,  0.21626004, -4.17977672],
       [-0.8246721 , -0.99360867, -4.89152182],
       [ 0.80336116, -0.21701989,  5.35205519],
       [-0.05566433, -0.86218553, -1.80941963],
       [ 0.        ,  0.        ,  0.        ]]), 'formation_center': [-0.10102462228706344, 0.701067998483472, 1.9724398815468924], 'flight_dome_size': 40.0, 'spawn_settings': {'lw_center_bounds': 5.0, 'lm_center_bounds': 10.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 10, 'min_z': 1.0, 'seed': None, 'num_lw': 1, 'num_lm': 5}, 'num_lm': 5}
model.policy_kwargs={'net_arch': {'pi': [256, 256, 256], 'vf': [256, 256, 256]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=40, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=40, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=256, out_features=4, bias=True)
  (value_net): Linear(in_features=256, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
