Result: similar to ma_quadx_hover_20240101-161104.zip. rew_magnituce speed very low. Maybe train with squared magnitude.
train_desc='training from zero with FSM om obs.shape 42. Trying 6 lm and 3 lw. Collision range 0.5m. No rew_engaging_enemy\n\n                        # reward for closing the distance\n            self.rew_closing_distance = np.clip(\n                self.previous_distance[agent_id][target_id] - self.current_distance[agent_id][target_id],\n                a_min=-10.0,\n                a_max=None,\n            ) #* self.chasing[agent_id][target_id]\n\n\n            # reward for engaging the enemy\n            self.rew_engaging_enemy = np.divide(3.0, self.current_vel_angles[agent_id][target_id],\n                                           where=self.current_vel_angles[agent_id][target_id] != 0) * (\n                    self.chasing[agent_id][target_id]\n                    * self.approaching[agent_id][target_id]\n                    * 1.0\n                )\n\n            # # reward for progressing to engagement\n            self.rew_near_engagement = (\n                    (self.current_magnitude[agent_id]- self.past_magnitude[agent_id])**2\n                    * 100.0\n                    * self.in_range[agent_id][target_id]\n                    * self.approaching[agent_id][target_id]\n                    * self.chasing[agent_id][target_id]\n            )\n\n            # reward for maintaning linear velocities.\n            self.rew_speed_magnitude =(\n                    (self.current_magnitude[agent_id])\n                    * self.approaching[agent_id][target_id]\n\n            )\n\n            self.rewards[agent_id] += (\n                    self.rew_closing_distance\n                    + self.rew_speed_magnitude\n\n            )\n'
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\train.py'
model.start_datetime=2024-01-01 16:33:15.795160
elapsed_time=0:31:03.754650
model.num_timesteps=2064384
device=device(type='cuda')
seed=None
batch_size=512
model.learning_rate=0.001
nn_t=[256, 256, 256]
num_cpus=12
num_vec_envs=12
model.n_envs=72
model.n_steps=2048
model.n_epochs=10
model.batch_size=512
random_respawn=True
spawn_settings={'lw_center_bounds': 10.0, 'lm_center_bounds': 10.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 5, 'min_z': 1.0, 'seed': None, 'num_lw': 3, 'num_lm': 6}
completion_datetime=2024-01-01 17:04:19.549810
model.action_space=Box(-10.0, 10.0, (4,), float64)
model.observation_space=Box(-inf, inf, (42,), float64)
env_kwargs={'start_pos': array([[-1.75881897, -0.49961387,  1.98928322],
       [-1.28963044,  0.75806083,  3.06056324],
       [-3.23135187,  1.55435323,  3.5342032 ],
       [-0.23464937, -1.11178385,  2.36211827],
       [-2.1965281 , -3.27251924,  2.19930981],
       [-9.17580135, -0.14626468,  3.7064592 ],
       [-2.36274925, -7.20685811,  1.87649359],
       [-3.86274925, -6.34083271,  1.87649359],
       [-3.86274925, -8.07288352,  1.87649359]]), 'start_orn': array([[ 0.48196228,  0.09886298, -0.15734622],
       [-0.48074232, -0.63788878,  1.11284496],
       [-0.3393304 , -0.39922607, -3.74942427],
       [-0.6508    ,  0.43948328,  1.45748968],
       [-0.19769038,  0.3624617 , -1.19000453],
       [ 0.66608044,  0.49145366, -4.07323129],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ]]), 'formation_center': [-3.3627492534803256, -7.206858113204364, 1.8764935890776697], 'flight_dome_size': 21.0, 'spawn_settings': {'lw_center_bounds': 10.0, 'lm_center_bounds': 10.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 5, 'min_z': 1.0, 'seed': None, 'num_lw': 3, 'num_lm': 6}, 'num_lm': 6, 'num_lw': 3}
model.policy_kwargs={'net_arch': {'pi': [256, 256, 256], 'vf': [256, 256, 256]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=42, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=42, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=256, out_features=4, bias=True)
  (value_net): Linear(in_features=256, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
