train_desc=' LW on and many agents since the beggining, rew_coef higher . \n                            \n                if target_id != agent_id:  #avoid the scenario where there are no targets, returns the last rewards in the last steps\n\n                # reward for closing the distance\n                self.rew_closing_distance[agent_id] = np.clip(\n                    self.previous_distance[agent_id][target_id] - self.current_distance[agent_id][target_id],\n                    a_min=-10.0,\n                    a_max=None,\n                )  \n\n                \n\n                exploding_distance = self.current_distance[agent_id][target_id] - 0.5\n\n                self.rew_close_to_target[agent_id] = - exploding_distance\n                 \n                # self.rew_close_to_target[agent_id] = 1 / (exploding_distance\n                #                                 if exploding_distance > 0\n                #                                 else 0.09)   #if the 1 is to hight the kamikazes will circle the enemy. try a\n\n\n            self.rewards[agent_id] += (\n                    self.rew_closing_distance[agent_id]\n                    + self.rew_close_to_target[agent_id] * self.reward_coef #* (1 - self.step_count/self.max_steps) # regularizations\n\n            )\n            \n            \n\n'
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\resume_train.py'
model.start_datetime=2024-01-09 04:55:02.906518
elapsed_time=0:12:20.150638
model_name=ma_quadx_chaser-22159360.zip
model_name=ma_quadx_chaser-23306240
model.num_timesteps=23461888
lw_stand_still=False
device=device(type='cuda')
seed=0
batch_size=1024
model.learning_rate=0.0001
discount_factor=0.99
nn_t=[256, 256, 256]
num_cpus=16
num_vec_envs=16
model.n_envs=144
model.n_steps=2048
model.n_epochs=10
model.batch_size=1024
random_respawn=True
spawn_settings={'lw_center_bounds': 10.0, 'lw_spawn_radius': 2.0, 'lm_center_bounds': 5.0, 'lm_spawn_radius': 10.0, 'min_z': 0.5, 'seed': None, 'num_lw': 3, 'num_lm': 9}
completion_datetime=2024-01-09 05:07:23.057156
model.action_space=Box(-10.0, 10.0, (4,), float64)
model.observation_space=Box(-inf, inf, (40,), float64)
env_kwargs={'start_pos': array([[-8.7377328 ,  7.82538196,  3.51140701],
       [ 0.60463928, -5.37638162,  8.36745968],
       [-7.98554521, -9.65419388,  8.91044329],
       [-5.7101643 ,  5.69182667,  6.95838376],
       [-7.05318919,  2.57424026,  5.00691144],
       [-4.04480044, -0.02871085, 10.78754253],
       [-5.08693541, -7.31602517, 13.5936922 ],
       [-5.59090471, -8.92465083,  9.11633089],
       [-1.34130407, -5.28595024, 12.64007898],
       [10.67237451,  3.83295422,  6.5211506 ],
       [ 7.67237451,  5.56500502,  6.5211506 ],
       [ 7.67237451,  2.10090341,  6.5211506 ]]), 'start_orn': array([[ 0.22948834, -0.85877364,  4.34689536],
       [ 0.73448116, -0.3753883 , -5.05013715],
       [-0.68987419, -0.81899409, -1.82348614],
       [ 0.99994443, -0.49130867,  1.8202349 ],
       [-0.07460637,  0.0288478 , -6.09355206],
       [ 0.38947069,  0.90266747, -4.97266658],
       [ 0.84132707, -0.77634405,  2.67670389],
       [ 0.71770079,  0.34770135, -4.32233144],
       [-0.71211216, -0.76008846,  6.01147673],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ]]), 'formation_center': [8.672374513091441, 3.8329542169510145, 6.521150598995786], 'flight_dome_size': 40.5, 'seed': None, 'spawn_settings': {'lw_center_bounds': 10.0, 'lw_spawn_radius': 2.0, 'lm_center_bounds': 5.0, 'lm_spawn_radius': 10.0, 'min_z': 0.5, 'seed': None, 'num_lw': 3, 'num_lm': 9}, 'num_lm': 9, 'num_lw': 3, 'max_duration_seconds': 15, 'distance_factor': 0.1, 'speed_factor': 11.0, 'lw_stand_still': False, 'rew_exploding_target': 200}
train_kwargs={'device': device(type='cuda'), 'batch_size': 1024, 'lr': 0.0001, 'discount_factor': 0.99, 'nn_t': [256, 256, 256], 'num_vec_envs': 16}
model.policy_kwargs={'net_arch': {'pi': [256, 256, 256], 'vf': [256, 256, 256]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=40, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=40, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=256, out_features=4, bias=True)
  (value_net): Linear(in_features=256, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
