Result: Even with the current_dist *5 no improvements. Drones moves slows to the target and do not get closer at all.
train_desc="training from zero with FSM om obs.shape 42. Trying 6 lm and 3 lw. Collision range 0.5m. trying the trick of past - current_distance * 5 (wasn't * 10 at end of this reward, was *1)\n\n            # reward for closing the distance\n            self.rew_closing_distance = np.clip(\n                self.previous_distance[agent_id][target_id] - self.current_distance[agent_id][target_id] * 5,\n                a_min=-10.0,\n                a_max=None,\n            ) * 10\n            #* self.chasing[agent_id][target_id]\n\n\n            # reward for engaging the enemy\n            self.rew_engaging_enemy = np.divide(3.0, self.current_vel_angles[agent_id][target_id],\n                                           where=self.current_vel_angles[agent_id][target_id] != 0) * (\n                    self.chasing[agent_id][target_id]\n                    * self.approaching[agent_id][target_id]\n                    * 1.0\n                )\n\n            # # reward for progressing to engagement\n            self.rew_near_engagement = (\n                    (self.current_magnitude[agent_id]- self.past_magnitude[agent_id])**2\n                    * 100.0\n                    * self.in_range[agent_id][target_id]\n                    * self.approaching[agent_id][target_id]\n                    * self.chasing[agent_id][target_id]\n            )\n\n            # reward for maintaning linear velocities.\n            self.rew_speed_magnitude =(\n                    (self.current_magnitude[agent_id]**2)\n\n                    * self.approaching[agent_id][target_id]\n\n            )\n\n            self.rewards[agent_id] += (\n                    self.rew_closing_distance\n\n                    + self.rew_speed_magnitude\n\n            )\n\n"
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\train.py'
model.start_datetime=2024-01-01 19:18:38.578767
elapsed_time=0:45:32.837450
model.num_timesteps=3145728
device=device(type='cuda')
seed=None
batch_size=512
model.learning_rate=0.001
nn_t=[256, 256, 256]
num_cpus=16
num_vec_envs=16
model.n_envs=96
model.n_steps=2048
model.n_epochs=10
model.batch_size=512
random_respawn=True
spawn_settings={'lw_center_bounds': 10.0, 'lm_center_bounds': 10.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 5, 'min_z': 1.0, 'seed': None, 'num_lw': 3, 'num_lm': 6}
completion_datetime=2024-01-01 20:04:11.416217
model.action_space=Box(-10.0, 10.0, (4,), float64)
model.observation_space=Box(-inf, inf, (42,), float64)
env_kwargs={'start_pos': array([[ -8.36048336,  -7.98234469,   5.46428724],
       [-10.36532054, -10.06742834,   3.4662946 ],
       [ -4.07229842,  -9.8079845 ,   5.68201661],
       [ -4.39547561,  -2.22262543,   1.88838774],
       [ -6.33811053,  -9.9227961 ,   2.6808554 ],
       [ -2.7063672 ,  -2.26017932,   3.21665775],
       [  3.74371337,   2.56793357,   1.46863501],
       [  2.24371337,   3.43395897,   1.46863501],
       [  2.24371337,   1.70190816,   1.46863501]]), 'start_orn': array([[ 0.37005904, -0.40229378, -3.75593115],
       [ 0.38054086,  0.21861748, -1.22249455],
       [-0.9365521 ,  0.21846633, -5.16733828],
       [ 0.10882485,  0.23280085, -4.00605138],
       [-0.36220775,  0.12593944, -6.02611501],
       [-0.61567358,  0.0281736 , -1.15143529],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ]]), 'formation_center': [2.7437133709657484, 2.5679335667438608, 1.4686350097969298], 'flight_dome_size': 21.0, 'spawn_settings': {'lw_center_bounds': 10.0, 'lm_center_bounds': 10.0, 'lw_spawn_radius': 1.0, 'lm_spawn_radius': 5, 'min_z': 1.0, 'seed': None, 'num_lw': 3, 'num_lm': 6}, 'num_lm': 6, 'num_lw': 3}
model.policy_kwargs={'net_arch': {'pi': [256, 256, 256], 'vf': [256, 256, 256]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=42, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=42, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=256, out_features=4, bias=True)
  (value_net): Linear(in_features=256, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
