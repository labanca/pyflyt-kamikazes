train_desc=' LW on and many agents since the beggining, rew_coef higher . \n                            \n                if target_id != agent_id:  #avoid the scenario where there are no targets, returns the last rewards in the last steps\n\n                # reward for closing the distance\n                self.rew_closing_distance[agent_id] = np.clip(\n                    self.previous_distance[agent_id][target_id] - self.current_distance[agent_id][target_id],\n                    a_min=-10.0,\n                    a_max=None,\n                )  \n\n                \n\n                exploding_distance = self.current_distance[agent_id][target_id] - 0.5\n\n                self.rew_close_to_target[agent_id] = - exploding_distance\n                 \n                # self.rew_close_to_target[agent_id] = 1 / (exploding_distance\n                #                                 if exploding_distance > 0\n                #                                 else 0.09)   #if the 1 is to hight the kamikazes will circle the enemy. try a\n\n\n            self.rewards[agent_id] += (\n                    self.rew_closing_distance[agent_id]\n                    + self.rew_close_to_target[agent_id] * self.reward_coef #* (1 - self.step_count/self.max_steps) # regularizations\n\n            )\n            \n            \n\n'
__file__='C:\\projects\\pyflyt-kamikazes\\apps\\resume_train.py'
model.start_datetime=2024-01-09 02:57:55.513929
elapsed_time=0:11:36.147391
model_name=ma_quadx_chaser-10625024.zip
model_name=ma_quadx_chaser-11673600
model.num_timesteps=11829248
lw_stand_still=False
device=device(type='cuda')
seed=0
batch_size=1024
model.learning_rate=0.0001
discount_factor=0.99
nn_t=[256, 256, 256]
num_cpus=16
num_vec_envs=16
model.n_envs=96
model.n_steps=2048
model.n_epochs=10
model.batch_size=1024
random_respawn=True
spawn_settings={'lw_center_bounds': 10.0, 'lw_spawn_radius': 2.0, 'lm_center_bounds': 5.0, 'lm_spawn_radius': 10.0, 'min_z': 0.5, 'seed': None, 'num_lw': 2, 'num_lm': 6}
completion_datetime=2024-01-09 03:09:31.661320
model.action_space=Box(-10.0, 10.0, (4,), float64)
model.observation_space=Box(-inf, inf, (40,), float64)
env_kwargs={'start_pos': array([[  5.24160192,  -3.50254449,  12.74362796],
       [ -2.91231991,  -9.44745609,   7.73601035],
       [ -9.51200604, -10.34947685,   4.25832674],
       [ -5.44180567, -11.03639944,   2.51151855],
       [  2.1196341 ,  -6.64463275,   7.29515764],
       [  1.91527596,  -9.6060608 ,   0.89501769],
       [ -2.7971348 ,   5.98717797,   6.03265171],
       [ -6.7971348 ,   5.98717797,   6.03265171]]), 'start_orn': array([[-0.12086808,  0.71820128,  2.08330977],
       [ 0.52261125, -0.29018593,  2.08308907],
       [-0.92175771,  0.52954252,  0.6438002 ],
       [-0.70482737,  0.16633209, -0.30180919],
       [ 0.45215796,  0.13285758, -3.67006855],
       [-0.1114477 , -0.42528442,  0.75235812],
       [ 0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ]]), 'formation_center': [-4.797134797994285, 5.987177973976493, 6.032651714323271], 'flight_dome_size': 40.5, 'seed': None, 'spawn_settings': {'lw_center_bounds': 10.0, 'lw_spawn_radius': 2.0, 'lm_center_bounds': 5.0, 'lm_spawn_radius': 10.0, 'min_z': 0.5, 'seed': None, 'num_lw': 2, 'num_lm': 6}, 'num_lm': 6, 'num_lw': 2, 'max_duration_seconds': 15, 'distance_factor': 0.1, 'speed_factor': 6.0, 'lw_stand_still': False, 'rew_exploding_target': 200}
train_kwargs={'device': device(type='cuda'), 'batch_size': 1024, 'lr': 0.0001, 'discount_factor': 0.99, 'nn_t': [256, 256, 256], 'num_vec_envs': 16}
model.policy_kwargs={'net_arch': {'pi': [256, 256, 256], 'vf': [256, 256, 256]}}
model.policy=ActorCriticPolicy(
  (features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (pi_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (vf_features_extractor): FlattenExtractor(
    (flatten): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp_extractor): MlpExtractor(
    (policy_net): Sequential(
      (0): Linear(in_features=40, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
    (value_net): Sequential(
      (0): Linear(in_features=40, out_features=256, bias=True)
      (1): Tanh()
      (2): Linear(in_features=256, out_features=256, bias=True)
      (3): Tanh()
      (4): Linear(in_features=256, out_features=256, bias=True)
      (5): Tanh()
    )
  )
  (action_net): Linear(in_features=256, out_features=4, bias=True)
  (value_net): Linear(in_features=256, out_features=1, bias=True)
)
model.policy_aliases={'MlpPolicy': <class 'stable_baselines3.common.policies.ActorCriticPolicy'>, 'CnnPolicy': <class 'stable_baselines3.common.policies.ActorCriticCnnPolicy'>, 'MultiInputPolicy': <class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>}
model.policy_class=<class 'stable_baselines3.common.policies.ActorCriticPolicy'>
